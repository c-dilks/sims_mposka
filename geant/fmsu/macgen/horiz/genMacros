#!/bin/bash
# generates macros along the horizontal direction in specified cell

particle=gamma
#particle=pi+


#nstb=3
#row=3
#col=8
nstb=1
row=4
col=5

ndiv=51
#energy_lb=5
#energy_ub=50
#energy_step=5
energy_lb=30
energy_ub=30
energy_step=5

seq $energy_lb $energy_step $energy_ub > enseq
cat enseq

if [ $# -eq 3 ]; then
  nstb=$1
  row=$2
  col=$3
else
  echo "using default coords"
fi

lspace=5.81
sspace=3.82
z=0.0

if [ $nstb -eq 1 ]; then
  x=$(echo "-($col+0.5)*$lspace" | bc -l)
  y=$(echo "(16.5-$row)*$lspace" | bc -l)
  spc=$lspace
elif [ $nstb -eq 2 ]; then
  x=$(echo "($col+0.5)*$lspace" | bc -l)
  y=$(echo "(16.5-$row)*$lspace" | bc -l)
  spc=$lspace
elif [ $nstb -eq 3 ]; then
  x=$(echo "-($col+0.5)*$sspace" | bc -l)
  y=$(echo "(11.5-$row)*$sspace" | bc -l)
  spc=$sspace
elif [ $nstb -eq 4 ]; then
  x=$(echo "($col+0.5)*$sspace" | bc -l)
  y=$(echo "(11.5-$row)*$sspace" | bc -l)
  spc=$sspace
else
  echo "error: bad nstb"
  exit
fi

echo "nstb=$nstb row=$row col=$col x=$x y=$y"

let mm=$ndiv%2
if [ $mm -ne 1 ]; then
  echo "error: use odd number of divisions (ndiv)"
  exit
fi

halfdiv=$(echo "($ndiv-1)/2" | bc)
rm -v macro*.mac

def="def_macro.mac" # default macro
defend="defend_macro.mac" # end of default macro
> $def
> $defend
echo "/control/verbose 2" >> $def
echo "/run/verbose 2" >> $def
echo "/vis/disable" >> $def
echo "/vis/drawVolume" >> $def
echo "/vis/viewer/set/viewpointThetaPhi 90 180 deg" >> $def
echo "/vis/viewer/zoom 1.4" >> $def
echo "/vis/scene/add/trajectories smooth" >> $def
#echo "/gps/position $x $y $z cm" >> $def
echo "/gps/particle $particle" >> $defend
#echo "/gps/direction 0 0 1" >> $defend
echo "/gps/direction 0.1736 0 0.9848" >> $defend # INCIDENT ANGLE (sin(a),0,cos(a); a=10deg)
while read energy; do
  echo "/gps/energy $energy GeV" >> $defend
  echo "/run/beamOn 4" >> $defend
done < enseq
rm enseq
echo "exit" >> $defend

cat $def >> macro_1.mac
echo "/gps/position $x $y $z cm" >> macro_1.mac
cat $defend >> macro_1.mac

mac_iter=2
sub_iter=1
divspc=$(echo "$spc/$ndiv" | bc -l)
while [ $sub_iter -le $halfdiv ]; do
  xl=$(echo "$x-$divspc*$sub_iter" | bc -l)
  xh=$(echo "$x+$divspc*$sub_iter" | bc -l)
  cat $def >> macro_$mac_iter.mac
  echo "/gps/position $xl $y $z cm" >> macro_$mac_iter.mac
  cat $defend >> macro_$mac_iter.mac
  let mac_iter++
  cat $def >> macro_$mac_iter.mac
  echo "/gps/position $xh $y $z cm" >> macro_$mac_iter.mac
  cat $defend >> macro_$mac_iter.mac
  let mac_iter++
  let sub_iter++
done




